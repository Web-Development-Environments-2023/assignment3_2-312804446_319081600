openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/kerendian/recipes_website_project/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/lielbin1/API/1.0.0
info:
  description: This is a API for Grandma's Recipes
  version: "1.0.0"
  title: Simple Inventory API
  contact:
    email: lielbin@post.bgu.ac.il
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers

paths:
  /Login:
    post:
      tags:
        - /Login
      summary: user exist in the DB and want log in
      description: check if the user exist. if not throw an error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        description: Inventory item to add
      responses:
        '200':
          description: user exist
        '400':
          description: wrong input parameter
          
  /Register:
    post:
      tags:
        - /Register
      summary: A new user from the client is added to the server
      description: A json object contains all the details about the new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Inventory item to add
      responses:
        '201':
          description: A new user has been added
        '400':
          description: wrong input parameter  

  /Logout:
    post:
      tags:
        - /Logout
      summary: The user from the client logout from the server
      description: A message logout succeeded.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Inventory item to add
      responses:
        '201':
          description: The user logout
        '400':
          description: something happend 
          
  /recipes/random:
    get:
      tags:
      - /recipes/random
      summary: get a list of 3 recipes from the recipes API
      description: A json object contains all the details about the recipes
      operationId: findRandomRecipes

      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter
      
          
  /recipes/{recipeId}:
    get:
      tags:
      - /recipes/recipeId
      summary: get a detail of recipe
      description: A json object contains the preview details about this recipe
      operationId: DetailRecipe
      parameters:
        - name: recipeId
          in: path
          description: ID of recipe to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: recipeId recipe object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter
        '404':
          description: bad input parameter
          
  /recipes/guest/search:
    get:
      tags:
      - /recipes/guest/search
      summary: get a detail of recipes that the user search
      description: A json object contains details about the recipes
      parameters:
        - in: query
          name: query
          description: Recipes name that the user want to search
          required: false
          schema:
            type: string
        - in: query
          name: number
          description: number of recipes to show after the search, the options are 5 10 15 and the default value is 5
          required: false
          schema:
            type: integer
            format: int64
            minimum: 5
        - in: query
          name: diet
          description: list of categories diet that the user can filter by them
          required: false
          schema:
            type: string
        - in: query
          name: cuisine
          description: list of categories cuisine that the user can filter by them
          required: false
          schema:
            type: string 
        - in: query
          name: intolerance
          description: list of categories intolerance that the user can filter by them
          required: false
          schema:
            type: string  
        - in: query
          name: sort
          description: sort options to sort the search results by time or popularity
          required: false
          schema:
            type: string 
      operationId: searchRecipes
      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter 

          
  /recipes/FullRecipeDetailsAPI/{recipe_id}:
    get:
      tags:
      - /recipes/FullRecipeDetailsAPI/recipe_id
      summary: get a full details of recipe in the spooncular API
      description: A json object contains all the details about this recipe
      operationId: FullDetailRecipeAPI
      parameters:
        - name: recipe_id
          in: path
          description: ID of recipe to return the full details for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A full details of a recipe in the spooncular API
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter     
    
           
  /users/FullRecipeDetailsDB/{recipe_id}:
    get:
      tags:
      - /users/FullRecipeDetailsDB/recipe_id
      summary: get a full details of recipe in the DB
      description: A json object contains all the details about this recipe
      operationId: FullDetailsRecipe
      parameters:
        - name: recipe_id
          in: path
          description: ID of recipe to return full details for.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A full details of a recipe in the DB
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

  /users/CreateRecipe: 
    get:
      tags:
      - /users/CreateRecipe
      summary: get a the details of recipe that the user created
      description: A json object contains all the details about this recipe
      operationId: CreatedRecipe

      responses:
        '200':
          description: A the details of a recipe that the user created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter  

    post:
      tags:
        - /users/CreateRecipe
      summary: the user can create a new recipe
      description: A json object contains details about the new recipe.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailRecipe'
        description: Inventory item to add
      responses:
        '201':
          description: A new recipe has been added
        '400':
          description: wrong input parameter    
          
  /users/familyRecipes:
    get:
      tags:
      - /users/familyRecipes
      summary: get a detail of user's family recipes
      description: A json object contains all the details about recipes of the user's family
      operationId: DetailFamilyRecipe

      responses:
        '200':
          description: A detail of a user's family recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

          
  /users/favorite:
    get:
      tags:
      - /users/favorite
      summary: get a detail of user's favorite recipes
      description: A json object contains all the details about favorite recipes
      operationId: DetailFavoriteRecipe

      responses:
        '200':
          description: A detail of a user's favorite recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

    post:
      tags:
        - /users/favorite
      summary: gets body with recipeId and save this recipe in the favorites list of the logged-in user
      description: The recipes enter to the favorite recipes of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: Inventory item to add
      responses:
        '201':
          description: A new recipe has been added to favorite
        '400':
          description: wrong input parameter     
    
  /users/lastWatched:
    get:
      tags:
      - /users/lastWatched
      summary: gets body with recipeId and save this recipe in the last watched list of the logged-in user
      description: A json object contains all the details about last wached recipes
      operationId: DetailLastWatchedRecipe

      responses:
        '200':
          description: A detail of a user's last watched recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter

    post:
      tags:
        - /users/lastWatched
      summary: returns the last watched recipes that were saved by the logged-in user
      description: The recipes enter to the last watched recipes of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: Inventory item to add
      responses:
        '201':
          description: A new recipe has been added to last wached 
        '400':
          description: wrong input parameter  
          
          
  /users/search:
    get:
      tags:
      - /users/search
      summary: get a detail of recipes that the user search
      description: A json object contains details about the recipes
      parameters:
        - in: query
          name: query
          description: Recipes name that the user want to search
          required: false
          schema:
            type: string
        - in: query
          name: number
          description: number of recipes to show after the search, the options are 5 10 15 and the default value is 5
          required: false
          schema:
            type: integer
            format: int64
            minimum: 5
        - in: query
          name: diet
          description: list of categories diet that the user can filter by them
          required: false
          schema:
            type: string
        - in: query
          name: cuisine
          description: list of categories cuisine that the user can filter by them
          required: false
          schema:
            type: string 
        - in: query
          name: intolerance
          description: list of categories intolerance that the user can filter by them
          required: false
          schema:
            type: string  
        - in: query
          name: sort
          description: sort options to sort the search results by time or popularity
          required: false
          schema:
            type: string        
      operationId: searchRecipesGuest
      responses:
        '200':
          description: A list of a recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DetailRecipe'
        '400':
          description: bad input parameter 
    
components:
  schemas:
    Login:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letter only
          example: lielbin
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password contains between 5 to 10 chars,
            at least one of them is number and spatial char
          example: liel@333

    User:
      type: object
      description: Model containing user info
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains between 3 to 8 letter only
          example: lielbin
        firstame:
          type: string
          description: first name of user
          example: Liel
        lastname:
          type: string
          description: last name of user
          example: Binyamin
        country:
          type: string
          description: user's country
          example: Israel
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password contains between 5 to 10 chars,
            at least one of them is number and spatial char
          example: liel@33
        password confirmation :
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            password need to be equal to first password
          example: liel@33
        email:
          type: string
          format: email
          description: user's email
          example: lielbin@post.bgu.ac.il

    Recipe:
      type: object
      description: Model containing recipe info
      properties:
        title:
          type: string
          description: name of recipe
          example: cheese cake
        readyInMinutes:
          type: number
          description: time to prepare the food
          example: 60
        image:
          type: string
          format: URL
          description: URL for the recipe's image
          example: https://jewishfoodexperience.com/wp-content/uploads/2013/05/falafel-677x279.jpg
        aggregateLikes:
          type: number
          description: num of the likes
          example: 102
        vegan:
          type: boolean
          description: Vegan or not
          example: False
        vegetarian:
          type: boolean
          description: vegetarian ot not
          example: True
        glutenFree:
          type: boolean
          description: True if gluten is free
          example: true
        is_favorite:
          type: boolean
          description: True if the recipe is in favorites of the user
          example: true
        is_watched:
          type: boolean
          description: True if the user watshed this recipe
          example: true
        servings:
          type: number
          description: number of servings
          example: 6
        
    DetailRecipe:
      type: object
      description: Model containing recipe info
      properties:
        
        title:
          type: string
          description: name of recipe
          example: cheese cake
        image:
          type: string
          format: URL
          description: URL for the recipe's image
          example: https://jewishfoodexperience.com/wp-content/uploads/2013/05/falafel-677x279.jpg
        servings:
          type: integer
          description: number of serving
          example: 6
        readyInMinutes:
          type: number
          description: time to prepare the food
          example: 60
        aggregateLikes:
          type: number
          description: num of the likes
          example: 102
        vegav:
          type: boolean
          description: Vegan or not
          example: False
        vegetarian:
          type: boolean
          description: vegetarian ot not
          example: True
        glutenFree:
          type: boolean
          description: True if gluten is free
          example: true
        instructions:
          type: string
          description: instructions how to make the recipe
          example: Four 8-ounce blocks of full-fat cream cheese are the base of this cheesecake. That’s 2 pounds. Make sure you’re buying the blocks of cream cheese and not cream cheese spread. There’s no diets allowed in cheesecake, so don’t pick up the reduced fat variety!
        ingredients:
          type: string
          description: list of json of ingredients and quantity of the recipe
          example:
                  - name: green onions
                    amount: 2
                  - name: non-fat milk
                    amount: 1